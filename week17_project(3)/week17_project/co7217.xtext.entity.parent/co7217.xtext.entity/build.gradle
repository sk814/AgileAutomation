dependencies {
	testCompile 'org.junit.jupiter:junit-jupiter-api'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine'
	testCompile "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
	testCompile "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
	implementation( files ('submission_helper/submission_helper_template-0.0.1-SNAPSHOT.jar'))
}
configurations {
	mwe2 {
		extendsFrom compile
	}
}

dependencies {
	mwe2 'org.eclipse.emf:org.eclipse.emf.mwe2.launch'
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 'org.eclipse.xtext:xtext-antlr-generator'
}

task generateXtextLanguage(type: JavaExec) {
	main = 'org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher'
	classpath = configurations.mwe2
	inputs.file "src/main/java/co7217/xtext/entity/GenerateEntityDSL.mwe2"
	inputs.file "src/main/java/co7217/xtext/entity/EntityDSL.xtext"
	outputs.dir "src/main/xtext-gen"
	args += "src/main/java/co7217/xtext/entity/GenerateEntityDSL.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

test {
	useJUnitPlatform()
}
generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]

sourceSets.test.groovy.srcDirs = ["src/test/java", "src/test/groovy"]